// Git commands

//Configure Global User
git config --global user.name abc

//Configure Global email
git config --global user.email abc@abc.com

//initialize git 
git init

// shows all hidden files & folders
ls -lart

//shows status
git status

//git unmodified
git add filename.ext

//saves file structure - use i key to insert details about commit, :wq to exit, esc to use :wq & other commands
git commit

// creates new files
touch filename.ext

// add all files to stage area
git add -A

//to unstage
git restore --staged file 

// shortcut to save commit
git commit -m "commit message"

//clear terminal
clear

//restores previous commit, for all files use 'git checkout -f'
git checkout filename.ext

//log which keeps track of all commits
git log

//view number of commits, -1 means recent 1 commit, similar for other numbers, use q to quit
git log -p -1

//used to find difference, compare changes on working tree w.r.t staging area
git diff

//compare changes with last commit on stage
git diff --staged

//commit all changes at once for all files
git commit -a -m "commit message"

//removes a file from commit as well as staging area
git rm filename.ext

//removes a file from commit but not from staging area, means file is present locally or in untracked section
git rm --cached filename.ext

//short status of all files
git status -s

m on right side shows modification status of file in working area
m on left side shows modification status of file in staging area
mm means modification is done on both working and staging area


//.gitignore - A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected; see the NOTES below for details.
Each line in a gitignore file specifies a pattern. When deciding whether to ignore a path, Git normally checks gitignore patterns from multiple sources, with the following order of precedence, from highest to lowest.

// If any file is present in the gitignore with its name it will be untracked, i.e it will not be shown in the git status except the modifications made in gitignore. 
For Eg : lets suppose a file with name ab.log and if we add this file to the gitignore, all the files with the same name will be ignored by this name.
if you want to add folder just follow this syntax ->  foldername/
if you want to ignore files with particular extension use -> *.ext eg: *.log, *.cpp etc


Branch
A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in a fork in the history of the project.

The git branch command lets you create, list, rename, and delete branches. It doesn’t let you switch between branches or put a forked history back together again. For this reason, git branch is tightly integrated with the git checkout and git merge commands. Also git branch command shows the current selected branch with *. The default brach is the master branch.
git branch

//to switch to the branch
git checkout branchname or git switch branchname 

// to create a new branch
git branch branchname

//to update a branch name - select the branch name using checkout or switch command and use the following
git branch -m new name

//to delete a branch name
To delete a local branch in Git, you simply run:

git branch -d <branch-name>

If the branch contains unmerged changes, though, Git will refuse to delete it. If you’re sure you want to do it, you’ll have to force the deletion by replacing the -d parameter with an uppercase D:

git branch -D <branch-name>

//to merge a brach to master
first switch to the branch and use the following command
git merge branchname

//to add a new branch and switch to it instantly
git checkout -b branchname or git switch -c branchname
